<UserControl
    x:Class="TigerWord.Views.MainMenu"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:ViewModels="clr-namespace:TigerWord.ViewModels"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
    xmlns:local="clr-namespace:TigerWord.Views"
    xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    Margin="-1,-2,-1,-1"
    xmlns:prism ="http://prismlibrary.com/"
    prism:ViewModelLocator.AutoWireViewModel="True"
    d:DataContext="{d:DesignInstance ViewModels:MainMenuViewModel}"
    d:DesignHeight="300"
    d:DesignWidth="400"
    BorderBrush="Blue"
    BorderThickness="0"
    mc:Ignorable="d">

    <UserControl.Resources>
        <ResourceDictionary>
            <!--  This is the template for the menu items.  -->
            <DataTemplate x:Key="MenuItemTemplate" DataType="{x:Type mah:HamburgerMenuIconItem}">
                <Grid Height="48">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type mah:HamburgerMenu}}, Path=CompactPaneLength}" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <ContentControl
                        Grid.Column="0" 
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Content="{Binding Icon}"
                        Focusable="False"
                        IsTabStop="False" />
                    <TextBlock
                        Grid.Column="1" 
                        VerticalAlignment="Center"
                        FontSize="16"
                        Text="{Binding Label}" />
                </Grid>
            </DataTemplate>
            <!--  This is the template for all menu items. In this sample we use the glyph items.  -->
            <DataTemplate x:Key="HamburgerMenuItem" DataType="{x:Type mah:HamburgerMenuGlyphItem}">
                <DockPanel Height="48" LastChildFill="True">
                    <Grid
                        x:Name="IconPart"
                        Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type mah:HamburgerMenu}}, Path=CompactPaneLength}"
                        DockPanel.Dock="Left">
                        <Image
                            Margin="12"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Source="{Binding Glyph}" />
                    </Grid>
                    <TextBlock
                        x:Name="TextPart"
                        VerticalAlignment="Center"
                        FontSize="16"
                        Text="{Binding Label}" />
                </DockPanel>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type mah:HamburgerMenu}}, Path=PanePlacement}" Value="Right">
                        <Setter TargetName="IconPart" Property="DockPanel.Dock" Value="Right" />
                        <Setter TargetName="TextPart" Property="Margin" Value="8,0,0,0" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <!--  This is the template for the option menu item  -->
            <DataTemplate x:Key="HamburgerOptionsMenuItem" DataType="{x:Type mah:HamburgerMenuIconItem}">
                <DockPanel Height="48" LastChildFill="True">
                    <ContentControl
                        x:Name="IconPart"
                        Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type mah:HamburgerMenu}}, Path=CompactPaneLength}"
                        Content="{Binding Icon}"
                        DockPanel.Dock="Left"
                        Focusable="False"
                        IsTabStop="False" />
                    <TextBlock
                        x:Name="TextPart"
                        VerticalAlignment="Center"
                        FontSize="16"
                        Text="{Binding Label}" />
                </DockPanel>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type mah:HamburgerMenu}}, Path=PanePlacement}" Value="Right">
                        <Setter TargetName="IconPart" Property="DockPanel.Dock" Value="Right" />
                        <Setter TargetName="TextPart" Property="Margin" Value="8,0,0,0" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <Style
                x:Key="MahApps.Styles.ListBoxItem.HamburgerMenuItem.Ripple"
                BasedOn="{StaticResource MahApps.Styles.ListBoxItem.HamburgerMenuItem}"
                TargetType="{x:Type ListBoxItem}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Grid
                                x:Name="RootGrid"
                                Background="Transparent"
                                RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}">
                                <Border
                                    x:Name="Border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <Grid Margin="{TemplateBinding BorderThickness}">
                                    <Grid
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type mah:HamburgerMenu}}, Path=ShowSelectionIndicator, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                                        <Rectangle
                                            x:Name="SelectionIndicator"
                                            Width="{DynamicResource HamburgerMenuSelectionIndicatorThemeWidth}"
                                            Height="{DynamicResource HamburgerMenuSelectionIndicatorThemeHeight}"
                                            Fill="{TemplateBinding Foreground}"
                                            Focusable="False"
                                            Opacity="0.0" />
                                    </Grid>
                                    <materialDesign:Ripple
                                        x:Name="ContentPresenter"
                                        Padding="{TemplateBinding Padding}"
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Content="{TemplateBinding Content}"
                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                        ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                        Feedback="{DynamicResource MahApps.Brushes.Gray.MouseOver}"
                                        Focusable="False"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.SelectedBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.SelectedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.SelectedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Opacity" Value="1.0" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True" />
                                        <Condition Property="Selector.IsSelectionActive" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.ActiveSelectionBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay}" />
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverSelectedBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverSelectedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverSelectedForegroundBrush), Mode=OneWay}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsSelected" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.HoverForegroundBrush), Mode=OneWay}" />
                                </MultiTrigger>

                                <Trigger Property="mah:ItemHelper.IsMouseLeftButtonPressed" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseLeftButtonPressedBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseLeftButtonPressedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseLeftButtonPressedForegroundBrush), Mode=OneWay}" />
                                </Trigger>
                                <Trigger Property="mah:ItemHelper.IsMouseRightButtonPressed" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseRightButtonPressedBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseRightButtonPressedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.MouseRightButtonPressedForegroundBrush), Mode=OneWay}" />
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="RootGrid" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background, Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledForegroundBrush), Mode=OneWay}" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsEnabled" Value="False" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledSelectedBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="ContentPresenter" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay}" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

            </Style>

            <Style
                x:Key="MahApps.Styles.HamburgerMenu.Ripple"
                BasedOn="{StaticResource MahApps.Styles.HamburgerMenu}"
                TargetType="{x:Type mah:HamburgerMenu}">
                <Setter Property="ItemContainerStyle" Value="{StaticResource MahApps.Styles.ListBoxItem.HamburgerMenuItem.Ripple}" />
                <Setter Property="OptionsItemContainerStyle" Value="{StaticResource MahApps.Styles.ListBoxItem.HamburgerMenuItem.Ripple}" />
                
                <Setter Property="ShowSelectionIndicator" Value="True" />
            </Style>
            <ObjectDataProvider
                x:Key="PanePlacementEnumValues"
                MethodName="GetValues"
                ObjectType="{x:Type mah:SplitViewPanePlacement}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="mah:SplitViewPanePlacement" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <ObjectDataProvider
                x:Key="DisplayModeEnumValues"
                MethodName="GetValues"
                ObjectType="{x:Type mah:SplitViewDisplayMode}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="mah:SplitViewDisplayMode" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <ObjectDataProvider
                x:Key="VisibilityEnumValues"
                MethodName="GetValues"
                ObjectType="{x:Type Visibility}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="Visibility" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

        </ResourceDictionary>
    </UserControl.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <ScrollViewer
            x:Name="testView"
            Grid.Column="1"
            MinWidth="230"
            Margin="0,0,0,0"
            Padding="0,0,5,0"
            HorizontalContentAlignment="Stretch"
            HorizontalScrollBarVisibility="Disabled"
            Visibility="Collapsed">
            <StackPanel Margin="0,0,0,10" Orientation="Vertical">
                <mah:ToggleSwitch
                    Margin="0,10,0,5"
                    Header="HamburgerMenuItem About:"
                    IsOn="{Binding CanShowHamburgerAboutCommand, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    OffContent="Disabled"
                    OnContent="Enabled" />

                <mah:ToggleSwitch
                    Margin="0,10,0,5"
                    Header="IsPaneOpen:"
                    IsOn="{Binding IsHamburgerMenuPaneOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                <mah:ToggleSwitch
                    Margin="0,10,0,5"
                    Header="CanResizeOpenPane:"
                    IsOn="{Binding ElementName=HamburgerMenuControl, Path=CanResizeOpenPane, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                <mah:MetroHeader Margin="0,10,0,5" Header="PanePlacement:">
                    <ComboBox
                        MinWidth="150"
                        HorizontalAlignment="Left"
                        ItemsSource="{Binding Source={StaticResource PanePlacementEnumValues}}"
                        SelectedItem="{Binding ElementName=HamburgerMenuControl, Path=PanePlacement, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </mah:MetroHeader>

                <mah:MetroHeader Margin="0,10,0,5" Header="DisplayMode:">
                    <ComboBox
                        MinWidth="150"
                        HorizontalAlignment="Left"
                        ItemsSource="{Binding Source={StaticResource DisplayModeEnumValues}}"
                        SelectedItem="{Binding ElementName=HamburgerMenuControl, Path=DisplayMode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </mah:MetroHeader>

                <mah:MetroHeader Margin="0,10,0,5" Header="SelectedIndex:">
                    <Slider
                        AutoToolTipPlacement="TopLeft"
                        Maximum="3"
                        Minimum="0"
                        Value="{Binding ElementName=HamburgerMenuControl, Path=SelectedIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </mah:MetroHeader>

                <mah:MetroHeader Margin="0,10,0,5" Header="CompactPaneLength:">
                    <Slider
                        AutoToolTipPlacement="TopLeft"
                        Maximum="80"
                        Minimum="10"
                        Value="{Binding ElementName=HamburgerMenuControl, Path=CompactPaneLength, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </mah:MetroHeader>

                <mah:MetroHeader Margin="0,10,0,5" Header="OpenPaneLength:">
                    <Slider
                        AutoToolTipPlacement="TopLeft"
                        Maximum="400"
                        Minimum="50"
                        Value="{Binding ElementName=HamburgerMenuControl, Path=OpenPaneLength, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </mah:MetroHeader>

                <mah:MetroHeader Margin="0,10,0,5" Header="HamburgerVisibility:">
                    <ComboBox
                        MinWidth="150"
                        HorizontalAlignment="Left"
                        ItemsSource="{Binding Source={StaticResource VisibilityEnumValues}}"
                        SelectedItem="{Binding ElementName=HamburgerMenuControl, Path=HamburgerVisibility, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </mah:MetroHeader>

                <mah:MetroHeader Margin="0,10,0,5" Header="Hamburger Width / Height:">
                    <UniformGrid Columns="2">
                        <Slider
                            Margin="0,0,5,0"
                            AutoToolTipPlacement="TopLeft"
                            Maximum="80"
                            Minimum="10"
                            Value="{Binding ElementName=HamburgerMenuControl, Path=HamburgerWidth, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        <Slider
                            Margin="5,0,0,0"
                            AutoToolTipPlacement="TopLeft"
                            Maximum="80"
                            Minimum="10"
                            Value="{Binding ElementName=HamburgerMenuControl, Path=HamburgerHeight, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    </UniformGrid>
                </mah:MetroHeader>
            </StackPanel>
        </ScrollViewer>

        <Border
            Grid.Column="0"
            Margin="0,0,0,0"
            BorderBrush="{DynamicResource MahApps.Brushes.Gray7}"
            BorderThickness="1">

            <mah:HamburgerMenu
                x:Name="HamburgerMenuControl"
                HamburgerWidth="48"
                IsPaneOpen="True"
                ItemInvoked="HamburgerMenuControl_OnItemInvoked"
                ItemTemplate="{StaticResource MenuItemTemplate}"
                OptionsItemTemplate="{StaticResource MenuItemTemplate}"
                SelectedIndex="{Binding MenuIndex}"
                DisplayMode="CompactOverlay"
                ItemsSource="{Binding MenuItems}"
                Style="{StaticResource MahApps.Styles.HamburgerMenu.Ripple}"
                VerticalScrollBarOnLeftSide="False">
                <!--  Header  -->
                <mah:HamburgerMenu.HamburgerMenuHeaderTemplate>
                    <DataTemplate>
                        <TextBlock HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   FontSize="11"
                                   Foreground="White"
                                   Text="module" />
                    </DataTemplate>
                </mah:HamburgerMenu.HamburgerMenuHeaderTemplate>
                <!--  Items  -->
                <!--
                <mah:HamburgerMenu.ItemsSource>
                    <mah:HamburgerMenuItemCollection>
                        <mah:HamburgerMenuIconItem Icon="{iconPacks:Material Kind=OCR}" Label="Tiger OCR">
                            <mah:HamburgerMenuIconItem.Tag>
                                <GoOCR:TigerOCR />
                            </mah:HamburgerMenuIconItem.Tag>
                        </mah:HamburgerMenuIconItem>
                    </mah:HamburgerMenuItemCollection>
                </mah:HamburgerMenu.ItemsSource>
                -->
                <!--  Options  -->
                <mah:HamburgerMenu.OptionsItemsSource>
                    <mah:HamburgerMenuItemCollection>

                        <mah:HamburgerMenuIconItem
                            x:Name="AboutOption"
                            Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=mah:HamburgerMenu}, Path=DataContext.ShowHamburgerAboutCommand}"
                            Label="About">
                            <mah:HamburgerMenuIconItem.Icon>
                                <iconPacks:PackIconMaterial
                                    Width="22"
                                    Height="22"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Kind="Help" />
                            </mah:HamburgerMenuIconItem.Icon>
                            <mah:HamburgerMenuIconItem.Tag>
                                <Grid>
                                    <local:AboutView/>
                                </Grid>
                            </mah:HamburgerMenuIconItem.Tag>
                        </mah:HamburgerMenuIconItem>
                        <mah:HamburgerMenuIconItem Icon="{iconPacks:Material Kind=Cog}" Label="Settings">
                            <mah:HamburgerMenuIconItem.Tag>
                                <Grid><local:SettingsView/>
                                </Grid>
                            </mah:HamburgerMenuIconItem.Tag>
                        </mah:HamburgerMenuIconItem>

                    </mah:HamburgerMenuItemCollection>
                </mah:HamburgerMenu.OptionsItemsSource>

                <!--  Content  -->
                <mah:HamburgerMenu.ContentTemplate>
                    <DataTemplate>
                        <Grid x:Name="ContentGrid">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="0" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Border
                                Grid.Row="0"
                                Margin="-1,0,-1,0"
                                Background="#7A7A7A">
                                <TextBlock
                                    x:Name="Header"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    FontSize="50"
                                    Foreground="White"
                                    Text="{Binding Label}"
                                    Visibility="Collapsed" />
                            </Border>
                            <mah:TransitioningContentControl
                                Grid.Row="1"
                                Content="{Binding}"
                                RestartTransitionOnContentChange="True"
                                Transition="Default">
                                <mah:TransitioningContentControl.Resources>
                                    <DataTemplate DataType="{x:Type mah:HamburgerMenuGlyphItem}">
                                        <Image Source="{Binding Glyph, Mode=OneWay, Converter={mah:NullToUnsetValueConverter}}" />
                                    </DataTemplate>
                                    <DataTemplate DataType="{x:Type mah:HamburgerMenuIconItem}">
                                        <ContentControl
                                            Content="{Binding Tag, Mode=OneWay}"
                                            Focusable="True"
                                            IsTabStop="False" />
                                    </DataTemplate>
                                </mah:TransitioningContentControl.Resources>
                            </mah:TransitioningContentControl>
                        </Grid>
                    </DataTemplate>
                </mah:HamburgerMenu.ContentTemplate>
            </mah:HamburgerMenu>

        </Border>
    </Grid>

</UserControl>